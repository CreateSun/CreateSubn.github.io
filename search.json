[{"title":"scrapy框架学习笔记","url":"/2022/01/29/scrapy框架学习笔记/","content":"\n## scrapy框架\n- 什么是框架\n    集成了很多功能，并且具有很强的通用性的项目模板\n- 如何学习框架\n- 什么是scrapy\n    - 爬虫中封装好的“明星”框架，封装程度高，使用频率高\n    - 功能：\n        - 高性能持久化存储\n        - 异步数据下载\n        - 高性能数据解析\n        - 分布式\n    - 基本使用\n        - 环境安装\n            - mac、Linux: `pip install scrapy`\n            - windows:\n                - `pip install wheel`\n                - 下载安装twisted\n                - `pip install pywin32`\n                - `pip install scrapy`\n        - 创建工程：`scrapy startproject xxxPro`\n        - 执行工程：`scrapy crawl sipderName`\n- 数据解析\n    - `response.xpath()`\n    - `extract()`\n    - `extract_first()`\n- 持久化存储\n    - 基于终端指令：\n        - 要求：只可以将parse()方法的返回值存储到本地的文本文件中\n        - 步骤：将parse中需要存储的数据包装起来并作为返回值进入return\n        - 注意：持久化对应的文本文件类型只能是：json、csv、jl、jsonlines、marshal、pickle等\n        - 好处：简洁、高效、便捷\n        - 缺点：局限性强，数据只能存储为指定后缀的文本文件，且只能存储parse封装好的指定数据\n    - 基于管道：\n        - 编码流程：\n            - 数据解析\n            - 将解析的数据封装存储到item类型的对象\n- 手动发送请求\n    - `yield scrapy.Request(url, callback)`\n\n- 五大核心组件\n    - 引擎（接收数据流&触发事务）\n        - 引擎将请求对象发送给调度器的过滤器\n        - 从调度器的队列中获取请求对象并发送给下载器\n        - 将Response发送给Spider的parse\n        - 接受parse解析好的数据并发送给管道\n    - 爬虫类（Spider）\n        - 产生url，封装为请求对象发送给 引擎 ，并进行请求发送\n        - 调用parse进行数据解析并发送给引擎\n    - 管道\n        - 接收引擎发送的解析好的数据进行持久化存储\n    - 下载器\n        - 进行数据下载获取Response\n        - 提交Response至引擎\n    - 调度器\n        - 过滤器\n            对重复的请求对象进行去重，将去重后的请求对象发送到队列\n        - 队列\n    问题：引擎是如何触发事务的？\n        - 引擎通过接收到的不同数据流类型判断事务类型\n- 请求传参\n    - 使用场景：爬取解析的数据不在同一张页面中。（深度爬取）\n    - 需求：爬取Boss直聘岗位名称与岗位描述\n    \n- 图片数据爬取之ImagesPipeline\n    - 基于字符串和基于图片的区别\n        - 字符串： 只需要基于xpath进行解析且提交管道并进行持久化\n        - 图片： xpath解析出图片src的属性值，单独对图片地址发起请求获取图片二进制类型的数据\n    - ImagesPipeline:\n        - 只需要将img的src的属性值进行解析，提交到管道，管道就会对图片的src进行请求发送获取图片的二进制数据，且还会帮我们进行持久化存储\n        - 需求：爬取站长素材的高清图片\n        - 使用流程：\n            - 解析图片地址（懒加载）\n            - 将存储图片地址的item提交到指定的管道类\n            - 在管道文件中定制一个基于ImagesPipeline的管道类\n                - `get_media_request()`\n                - `file_path()`\n                - `item_completed()`\n            - 在配置文件中：\n                - 指定文件存储目录: `IMAGES_STORE = '[path]'`\n                - 指定开启的管道： 自定制的管道类\n        - 遇到的问题：\n            - item提交给管道后，管道不接收图片，死活没有反应: `INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)`\n            - LOG_LEVEL = 'DEBUG'后看到一条警告: \n    `WARNING: Disabled ImgsPipeline: ImagesPipeline requires installing Pillow 4.0.0 or later`于是就赶紧安装了Pillow, 问题得以解决\n              \n- 中间件\n    - 爬虫中间件\n    - 下载中间件\n        - 位置：引擎和下载器之间\n        - 功能：批量拦截整个工程中所有的请求和响应\n        - 拦截请求：\n            - 进行UA伪装（可以对指定的请求进行专门的UA伪装）\n            - 代理IP的设定\n        - 拦截响应：\n            - 篡改响应数据、对象\n            - 需求：爬取网易新闻数据（标题+内容）\n                1. 通过首页解析出五大板块对应详情页的URL（直接爬取）\n                2. 板块对应的新闻标题列表（动态加载）\n                3. 通过解析每一条新闻详情页URL，获取详情页源码解析出新闻内容（直接爬取）","tags":["scrapy","爬虫","python","框架"]},{"title":"临江仙·夜饮东坡醒复醉 苏轼","url":"/2022/01/26/临江仙·夜饮东坡醒复醉/","content":"\n夜饮东坡醒复醉，归来仿佛三更。家童鼻息已雷鸣。敲门都不应，倚杖听江声。\n\n长恨此身非我有，何时忘却营营。夜阑风静縠纹平。小舟从此逝，江海寄余生。","tags":["诗词"]},{"title":"洗牌算法","url":"/2021/12/29/洗牌算法/","content":"## 基本原理\n>   洗牌算法是一种将一组数据随机排列的算法，保证每一个元素重新被分配到任何一个位置上的几率都是均等的，是保证随机程度的关键。\t\n\n每次随机选取一个数，然后将该数与数组中最后(或最前)的元素相交换(如果随机选中的是最后/最前的元素，则相当于没有发生交换)；然后缩小选取数组的范围，去掉最后的元素,即之前随机抽取出的数。重复上面的过程，直到剩余数组的大小为1，即只有一个元素时结束。\n## 完整代码\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>洗牌算法</title>\n</head>\n\n<body>\n    <script>\n        let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n        document.writeln(arr)\n        document.writeln(\"<p>洗牌算法=></p>\")\n\n        function pockerAlgorithm(arr) {\n            let len = arr.length\n            arr.forEach((item, index) => {\n                let max = len - index - 1 // cal max position\n                let pos = Math.floor(Math.random() * (max + 1))\n                console.log(max + \"     \" + pos)\n\n                let temp = arr[pos]\n                arr[pos] = arr[max]\n                arr[max] = temp\n            })\n            return arr\n        }\n\n        document.writeln(pockerAlgorithm(arr) + \"<br>\")\n        document.writeln(pockerAlgorithm(arr) + \"<br>\")\n        document.writeln(pockerAlgorithm(arr) + \"<br>\")\n    </script>\n</body>\n\n</html>\n```","tags":["算法","洗牌算法"]},{"title":"我喜欢过两个女孩，一个是你，另一个也是你","url":"/2020/08/05/我喜欢过两个女孩，一个是你，另一个也是你/","content":"\n<p style=\"font-size: 2rem;font-family: 楷体\">遗憾没有早早遇见，与你之间错过了许多年。</p>\n\n> <p style=\"font-family: 楷体\">小时候不懂鲁迅所说的：“我们家有两棵树，一颗是枣树，另一颗也是枣树。”直到经历了一些事情，才渐渐地明白了此中的深意。</p>\n\n<p style=\"font-family: 楷体\">煙雨行舟卻不知舟在何處</p>\n\n<p style=\"font-family: 楷体\">唱着年少有爲的人終究是負了佳人</p>\n\n<p style=\"font-family: 楷体\">“誰能憑愛意要富士山私有”</p>\n\n<p style=\"font-family: 楷体\">本就無法打動的人</p>\n\n<p style=\"font-family: 楷体\">憑你再用盡心機又如何</p>\n\n<p style=\"font-family: 楷体\">我的愛像塵埃</p>\n\n<p style=\"font-family: 楷体\">何謂小恩 何謂小惠</p>\n\n<p style=\"font-family: 楷体\">何謂大恩 何謂大德</p>\n\n<p style=\"font-family: 楷体\">再微不得到的小惠也能變成大恩</p>\n\n<p style=\"font-family: 楷体\">只是你放下了手裡的放大鏡</p>\n\n<p style=\"font-family: 楷体\">沒有誰對誰錯 只有愛與不愛</p>\n\n<p style=\"font-family: 楷体\">這世界還是一片光亮</p>\n\n<p style=\"font-family: 楷体\">我要帶你到處去飛翔</p>\n\n<p style=\"font-family: 楷体\">你不再是我的專屬</p>\n\n<p style=\"font-family: 楷体\">你的裙擺 你的衣角</p>\n\n<p style=\"font-family: 楷体\">你的薄脣 你的眉眼</p>\n\n<p style=\"font-family: 楷体\">看着都有種別樣的心酸</p>\n\n<p style=\"font-family: 楷体\">不過還好 慢慢地放下</p>\n\n<p style=\"font-family: 楷体\">舊的總要走 新的總要來</p>\n\n<p style=\"font-family: 楷体\">不過我是個深情的人</p>\n\n<p style=\"font-family: 楷体\">枯死的還能張處新芽</p>\n\n<p style=\"font-family: 楷体\">我靜靜地蹲在花盆前爲枯死的小花澆水</p>\n\n<p style=\"font-family: 楷体\">我想象着小花復甦後我欣喜若狂的樣子</p>\n\n<p style=\"font-family: 楷体\">有人勸我不如再摘一株小花</p>\n\n<p style=\"font-family: 楷体\">一樣美麗 一樣芬芳</p>\n\n<p style=\"font-family: 楷体\">但</p>\n\n\n\n<p style=\"font-family: 楷体\">總歸不是這一株小花</p>\n\n<pre style=\"font-family: 楷体\">我也早已失去了種花的本事</pre>\n","tags":["Heart"]},{"title":"生与死","url":"/2020/07/27/石凳/","content":"\n\n图书馆前的林荫路上有许多石凳\n\n我一个一个地坐过去\n\n每次坐下没过一会\n\n我都会忍不住看向下一个凳子\n\n总觉得下面的那一条才是我们那天坐的\n\n我大约是找到了那天的凳子\n\n也可能是弄丢了你-\n","tags":["人生","heart"]},{"title":"浮世三千","url":"/2020/07/25/浮世三千/","content":"\n**I love three things in the world**\n**The sun, The moon, and you**\n**Sun for the morning**\n**Moon for the night**\n**And you, forever**\n\n\n<p style=\"font-family: 楷体,隶书,宋体\">浮世三千 吾爱有三</p>\n<p>日， 月， 与卿</p>\n<p>日为朝</p>\n<p>月为暮</p>\n卿为朝朝暮暮\n\n","tags":["Heart","Soul"]},{"title":"老男孩","url":"/2020/07/25/老男孩/","content":"# 这辈子也不会这么迷茫了\n\n> “那是我日夜思念深深爱着的人呐，到底我该如何表达，她会接受我吗？”\n\n 最近尤其喜欢这首歌，大概是歌词里面凡是带“她”的我都喜欢吧。大学生涯以来最困扰我的问题竟然不是写不出好的程序，我也是奇了怪了。\n\n说再多的话也无济于事，可能这是我自己独有的属性，脑子里的想法就像波澜的海面，原本平静的海面不知何时就会泛起一阵涟漪。我的内心总是不平静的，嘴上总说着“没事没事，就是发会呆”，不过是不愿往深处想罢了，越往深处想，心里越堵得慌。曾经嘲笑别人输给了爱情，结果自己也陷了进去，无法自拔，不过是不愿往深处想罢了，越往深处想，心里越堵得慌。曾经嘲笑别人输给了爱情，结果自己也陷了进去，无法自拔。。\n","tags":["Heart","Soul","人生"]},{"title":"裤子","url":"/2020/05/27/裤子/","content":"\n那条裤子\n\n当时有点确实有点窄\n\n但是现在很合身\n\n可能是因为夏天来了 穿的薄了\n\n也可能\n\n是因为你走了\n","tags":["Soul"]},{"title":"博客搭建完成","url":"/2020/04/05/My-first-post/","content":"\n# 第一次博客\n\n## 纪念\n\n>  这是我的第一次博客，今天终于成功地用Hexo搭建起来一个个人博客。\n\n​\t最近在忙实验和项目， 事情还是不少的，下下来打算好好地复习一下功课，再研究点自己喜欢的小玩意。\n\n## 计划\n\n邻近五一了，5天时间，本来打算去找可爱的，但是她要和家人出去玩，所以五一假期应该会有许多的空余 时间了。这段时间也可以利用起来，完善一下最近想做的一些事情。\n\n+ **复习硬件和算法**\n+ **研究一下hexo，在github搭建一个完整的博客体系**\n+ 做点小手工 ， *这也是我一直以来非常想做的事情*\n+ 好久没有看英语了，得抓紧时间学英语\n+ 写一篇博客讲一讲自己搭建博客的经历\n+ 好好地看看数据库\n\n\n\n### 最后一条：**当然要和基友整一下大革命啦**！\n\n\n\n","tags":["日常"]}]