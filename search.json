[{"title":"2022新年愿望，和女孩子说话不脸红","url":"/2022/02/02/2022年度总结/","content":"\n&emsp;&emsp;下午去溜了好一会，从2点一直在街上溜达到下午5点多，走一会歇一会和朋友聊了很久，回家的路上越发地感觉应该写一点什么来整理一下我这一年以来的经历。其实这篇博客是除夕的晚上创建的，但是那晚什么都没写，也不知道该从哪里写起就睡觉去了，今晚打了一晚上的游戏，也打算写个开头就去睡觉了。\n`2022-02-05 23:57:00`\n\n---\n> &emsp;&emsp;有些人总会像流星一样在那些平淡的日子里一闪而过，有幸能亲眼看到她的消逝，在我的心中留下一道永不会消逝的光芒,点缀着我的天空，照亮着我脚下的路。\n\n&emsp;&emsp;昨晚偶然和一位许久没有联系的朋友聊了几句，说来奇怪，明明当初认识她的时候几乎无话不谈，现在却不知道怎么开口。细细算来，我们认识已经3年有余，她从高三到大三，我从大一到大四，她变成了学姐，我也变成了老学姐。时间有些长，以至于想起曾经做过的一些傻事现在只觉得意味深长。她告诉我这三年她过得很不错，打了比赛拿了奖，拿了奖学金，过了六级，预备党员，暑假到机关单位实习，不过还是抱怨“好累”，我相信她说的“累”是真的。她又问道我有没有收到什么上市公司的“橄榄枝”，我笑着说我去年一直在准备考研的事情根本没来得及投简历。看着她细数大学拿到的荣誉，我也在问自己这四年收获了些什么？四六级、省赛银奖、“碰瓷”可以勉强算上的国赛铜奖、在同行面前能勉强算是入门的专业技术、外人听起来很牛其实算不上什么的校企实践经历。这些零零碎碎的经历拼凑起来我的大学四年，最后几乎丝毫没有犹豫地选择了考研，如今坐在家里等待生死未卜的考试成绩。\n&emsp;&emsp;谈起考研，其实说不上什么远大的理想，就是希望能有个更好的平台和更好的文凭能够让我学到更多的知识，能够支撑着我亲手建造起属于自己的生活。有车有房，没有那么大的压力，希望朋友们也都能通过自己的努力过上好生活，偶尔和他们出去走一走逛一逛。更多的时间是和另一半待在一起，我们一起生活，宁静的下午我们慵懒地靠在一起聊着我们的过去和未来。如果能为集体，为社会做出一些贡献我当然是非常乐意的，只是就我个人的愿望而言，家庭和睦，物质生活富足就已经实我的梦中情生活了。关于以后留在什么地方工作，做什么样的工作，我有过一些考虑。如果能考上硕士，毕业后去大厂待几年如果薪水够我在当地买房那就选择定居，或者大厂不好混，那就靠着这张硕士文凭去做一名高校的老师，选择安稳的生活。如果很不幸我没有考上硕士，那就根据成绩的好坏判断是否还要二战的必要以及决定二战考哪里。说实话每次一想到自己很可能是没有希望考上的都会禁不住打一个寒颤，以后的打算摆在面前让我不寒而栗。可是现实是总归要面对的，读研，二战，工作，总要做出选择。\n> &emsp;&emsp;分手不是那么容易就能走得出来的。\n\n&emsp;&emsp;这句话是我说的，或许也只是对我自己有效果。这次比上次带给我的冲击力要强上许多，可能是因为这件事情本身就比以往的要复杂许多。即便是快半年过去了，深夜也常感到孤独，晚上经常会梦到我们彼此解开了心结，冰释前嫌重归于好，或者梦到我们一拍两散，永不联系。我一直在感叹我这不平凡的经历，让我越发地确信我应该不会是一个平庸之辈。“平凡而不平庸”，我会平凡地活着，但我无法接收平庸的生活。昨晚出去跑了几公里，突然间的一瞬间感受到了一股前所未有的释然，最后冲刺的时候感受到了那种心无旁骛一心往前冲的感觉，我相信慢慢地肯定会走出来的。事业也好，爱情也罢，我绝不会逆来顺受，不会随波逐流，我要分析自己的问题，改正自己的错误，认识自己的软肋，找到自己的道路。毕竟每个人的追求都不同，只要敢于勇敢追求自己想要的生活，就是生活的勇者。\n\n<p style=\"font-family: 楷体;text-align:center;\">心怀期待的人还在等待</p>\n<p style=\"font-family: 楷体;text-align:center\">攒满失望的人早已离开</p>\n<p style=\"font-family: 楷体;text-align:center\">仍然自由自我 永远高唱我歌</p>\n<p style=\"font-family: 楷体;text-align:center\">走遍千里</p>\n\n<script>console.log(\"永远年轻，\\n永远热泪盈眶\")</script>\n","tags":["Heart"],"categories":["日常"]},{"title":"罗老师百大发言","url":"/2022/01/30/罗老师百大发言/","content":"<p style=\"font-family: 楷体,隶书,宋体\">\n    &emsp;&emsp;我们注定无法生活在凡事都安排好的幻觉之中，人生中很多重要的时刻常常不期而至，所以人生唯一确定的也许就是不确定的人生。在英文中，“今天”也意外着礼物“present”，而在中文中，“今”与命令的“令”很相似，所以我把今天既看做礼物又看做命令，需要一点一点过好，完成每天的命令。当我们忠于每个今天的命令，我们就能从容面对每个神秘莫测的明天。明天并不可控，但我们可以选择乐观以待，让我们以感恩的心演好每个今天的剧本，超越我们有限的今生。\n</p>\n","tags":["Heart","日常"],"categories":["日常"]},{"title":"scrapy框架爬取网易新闻","url":"/2022/01/29/scrapy爬取网易新闻/","content":"\n\n## scrapy爬取网易新闻\n\n> 使用scrapy爬取网易新闻的**国内**、**国际**、**航空**三个板块的新闻数据存储在csv中\n\n### 初始化操作\n```shell\nscrapy startproject wangyiPro # 新建项目\ncd wangyiPro\nscrapy genspider news # 创建爬虫\n```\n### 编写爬虫(news.py)\n```python\nimport scrapy\nfrom selenium.webdriver import Chrome, ChromeOptions\nfrom wangyiPro.items import WangyiproItem\nimport re\n\n\nclass NewsSpider(scrapy.Spider):\n    name = 'news'\n    # allowed_domains = ['www.xxx.com']\n    start_urls = ['https://news.163.com/']\n\n    '''\n        爬虫初始化阶段创建selenium无头浏览器实例用于获取动态加载的数据\n    '''\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        options = ChromeOptions()\n        options.add_experimental_option(\"excludeSwitches\",['enable-automation'])\n        # options.add_argument('--headless')  这两个是无头浏览器的选项\n        # options.add_argument('--disable-gpu')\n        self.bro = Chrome(executable_path='D:\\\\Project\\\\python\\\\scrapy-test\\\\5.动态加载数据处理\\\\chromedriver.exe',\n                          chrome_options=options)\n\n    # 解析五大板块对应详情页的url\n    section_urls = []\n\n    # parse用于解析网易新闻的首页导航栏的对应板块url\n    def parse(self, response):\n        li_list = response.xpath('//*[@id=\"index2016_wrap\"]/div[3]/div[2]/div[2]/div[2]/div/ul/li')\n        # with open('page.html', 'w', encoding='utf-8') as fp:\n        #     fp.write(response.text)\n        index_list = [3, 6]\n        # index_list = [2]\n        # 板块url\n        for index in index_list:\n            name = li_list[index].xpath('./a/text()').extract_first()\n            url = li_list[index].xpath('./a/@href').extract_first()\n            item = {\n                \"url\": url,\n                \"name\": name\n            }\n            self.section_urls.append(item)\n        # 依次对每个板块对应的页面进行请求\n        for item in self.section_urls:\n            # print(url)\n            yield scrapy.Request(url=item['url'], callback=self.parse_section,\n                                 meta={\"url\": item['url'], \"category\": item['name']})\n\n    # 解析新闻标题和详情页url\n    def parse_section(self, response):\n        with open('./page.html', 'w', encoding='utf-8') as fp:\n            fp.write(response.text) # 用于储存页面便于调试\n        div_list = response.xpath('//div[@class=\"ndi_main\"]/div')\n        category = response.meta['category']\n        print(div_list[0])\n        for div in div_list:\n            title = div.xpath('./div//h3/a/text()').extract_first()\n            detail_url = div.xpath('./div//h3/a//@href').extract_first()\n            print(title, detail_url)\n            item = WangyiproItem()\n            item['title'] = title\n            item['category'] = category\n            yield scrapy.Request(url=detail_url, callback=self.parse_detail, meta={\"item\": item})\n\n    # 解析新闻数据\n    def parse_detail(self, response):\n        '''\n            这一部分是对新闻的内容、发布时间、来源做解析\n            内容获取后进行数据清晰，去掉空行、制表符等多余内容\n        '''\n        content = response.xpath('//*[@id=\"content\"]/div[2]').extract()\n        content = ''.join(content)\n        content = re.sub('\\n', '', content)\n        content = re.sub('\\s', '', content)\n        content = re.sub(' ', '', content)\n        item = response.meta['item']\n        item['content'] = content\n        '''\n            发布时间的原始格式是\"\\n         2022-01-22 12:02:20 来源:\",使用函数对时间部分进行提取\n        '''\n        timeline = response.xpath('//div[@class=\"post_info\"]/text()').extract_first()\n        timeline = timeline.split('来源')[0]\n        timeline = re.findall(pattern=r'20?.* ?.*:[0-9]{2}', string=timeline)[0]\n        item['timeline'] = timeline\n        item['origin'] = response.xpath('//*[@id=\"container\"]/div[1]/div[2]/a/text()').extract_first()\n        # print(item)\n        yield item\n\n    def closed(spider, reason):\n        spider.bro.quit()\n        pass\n```\n\n### items.py\n```python\nimport scrapy\n\n\nclass WangyiproItem(scrapy.Item):\n    # 标题、内容、来源、发布时间、分类\n    title = scrapy.Field()\n    content = scrapy.Field()\n    origin = scrapy.Field()\n    timeline = scrapy.Field()\n    category = scrapy.Field()\n```\n\n### 中间件middleware.py\n> 中间件部分主要用于处理新闻板块的新闻列表部分是动态加载出来的，所以在这里使用`selenium`将获取到的动态加载数据替换原先下载器获取的数据，然后发送给引擎处理\n```python\n# Define here the models for your spider middleware\n\nimport time\n\nfrom scrapy import signals\nfrom scrapy.http import HtmlResponse\n\n# useful for handling different item types with a single interface\nfrom itemadapter import is_item, ItemAdapter\n\n\nclass WangyiproDownloaderMiddleware(object):\n    # Not all methods need to be defined. If a method is not defined,\n    # scrapy acts as if the downloader middleware does not modify the\n    # passed objects.\n\n    def process_request(self, request, spider):\n        # Called for each request that goes through the downloader\n        # middleware.\n        # print('request middleware')\n\n        # Must either:\n        # - return None: continue processing this request\n        # - or return a Response object\n        # - or return a Request object\n        # - or raise IgnoreRequest: process_exception() methods of\n        #   installed downloader middleware will be called\n        return None\n\n    #  拦截板块详情页响应对象，修改为符合需求的对象\n    def process_response(self, request, response, spider):\n        #  获取在爬虫中定义的浏览器对象\n        print('开始拦截...')\n        bro = spider.bro\n        urls = []\n        for url in spider.section_urls:\n            urls.append(url['url'])\n        # Called with the response returned from the downloader.\n        #  筛选对应的响应对象\n        if request.url in urls:\n            # response 板块详情页响应对象\n            # 实例化新的响应对象，包含动态加载的数据\n            '''\n                如何获取动态加载的响应数据？\n                selenium\n            '''\n            bro.get(url=request.url)\n            bro.implicitly_wait(30)  # 隐形等待最长30s\n            # time.sleep(4)\n            page_text = bro.page_source # 获取动态加载的新闻数据\n            new_res = HtmlResponse(url=request.url, body=page_text, encoding='utf-8', request=request)\n            return new_res\n        else:\n            print('Middleware no filter:', request.url)\n            return response\n\n    def process_exception(self, request, exception, spider):\n        # Called when a download handler or a process_request()\n        # (from other downloader middleware) raises an exception.\n\n        # Must either:\n        # - return None: continue processing this exception\n        # - return a Response object: stops process_exception() chain\n        # - return a Request object: stops process_exception() chain\n        return None\n\n```\n### 管道pipelines.py\n> 用于持久化存储\n```python\n# Define your item pipelines here\n#\n# Don't forget to add your pipeline to the ITEM_PIPELINES setting\n# See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html\n\n\n# useful for handling different item types with a single interface\nimport csv\nimport os\n\nfrom itemadapter import ItemAdapter\n\n\nclass WangyiproPipeline:\n    def __init__(self):\n        # 如果文件不存在就新建文件\n        # 这里参考了https://www.cnblogs.com/shawone/p/10228912.html\n        if not os.path.exists('./news.csv'):\n            # 打开文件，指定方式为写，利用第3个参数把csv写数据时产生的空行消除\n            self.f = open(\"news.csv\", \"a\", newline=\"\", encoding='utf-8')\n            # 设置文件第一行的字段名，注意要跟spider传过来的字典key名称相同\n            self.fieldnames = [\"title\", \"content\", \"origin\", \"timeline\", \"category\"]\n            # 指定文件的写入方式为csv字典写入，参数1为指定具体文件，参数2为指定字段名\n            self.writer = csv.DictWriter(self.f, fieldnames=self.fieldnames)\n            # 写入第一行字段名，因为只要写入一次，所以文件放在__init__里面\n            self.writer.writeheader()\n        else:\n            self.f = open(\"news.csv\", \"a\", newline=\"\", encoding='utf-8')\n            self.fieldnames = [\"title\", \"content\", \"origin\", \"timeline\", \"category\"]\n            self.writer = csv.DictWriter(self.f, fieldnames=self.fieldnames)\n    '''\n        重写父类方法\n        该仅仅在爬虫开始时调用一次\n    '''\n    def open_spider(self, spider):\n        pass\n\n    def process_item(self, item, spider):\n        self.writer.writerow(item)\n        return item  # 传递给下一个执行的管道类\n\n    def close_spider(self, spider):\n        print('结束爬虫...')\n        self.f.close()\n\n```\n### 项目配置settings.py\n> 这是坑比较多的一部分\n#### UA伪装与代理IP\n```python\n# 由于网易没有太复杂的校验，所有我的全部请求使用的一样的请求头\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\nUSER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36'\n```\n> 另外代理IP可以在中间件中的`downloader`类中的`process_exception`函数中做判断并设置代理IP\n```python\n# 拦截发生异常的请求\n    def process_exception(self, request, exception, spider):\n        # Called when a download handler or a process_request()\n        # (from other downloader middleware) raises an exception.\n\n        #  代理\n        if request.split(':')[0]=='http':\n            request.meta['proxy'] = 'http://'+ random.choice(self.proxy_http)\n        else:\n            request.meta['proxy'] = 'http://'+ random.choice(self.proxy_https)\n        # Must either:\n        # - return None: continue processing this exception\n        # - return a Response object: stops process_exception() chain\n        # - return a Request object: stops process_exception() chain\n        return request\n```\n> 最后就是一些常见配置\n```python\n# Obey robots.txt rules\nROBOTSTXT_OBEY = False\nLOG_LEVEL = 'ERROR'\n# Enable or disable downloader middlewares\n# 这里有个很坑的地方是关于中间件，下载中间件和爬虫中间件的配置是在两个不同的地方，我们只需要开启下载中间件就可以了。第一次使用的时候没有看清开启的是SPIDER_MIDDLEWARES，还特意把WangyiproSpiderrMiddleware换成WangyiproDownloaderMiddleware因此走了很多弯路，导致中间件调试了很久都不起作用，我还以为我电脑坏了。\n\nSPIDER_MIDDLEWARES = {\n#   'wangyiPro.middlewares.WangyiproSpiderrMiddleware': 543,\n   'wangyiPro.middlewares.WangyiproDownloaderMiddleware': 543,\n}\n\nDOWNLOADER_MIDDLEWARES = {\n   'wangyiPro.middlewares.WangyiproDownloaderMiddleware': 543,\n}\n# Configure item pipelines\nITEM_PIPELINES = {\n   'wangyiPro.pipelines.WangyiproPipeline': 300,\n}\n\n```\n\n### 关于调试main.py\n&emsp;&emsp;起初运行爬虫都是在控制台中用`scrapy`命令，但是这样就无法让IDE中的断点生效从而无法调试，后来参考了`https://www.cnblogs.com/weixuqin/p/9074448.html`, 在项目的根目录创建`main.py`，写入以下内容后右键`debug`开启了调试功能\n```python\n#!/usr/bin/env python\n#-*- coding:utf-8 -*-\n\nfrom scrapy.cmdline import execute\nimport os\nimport sys\n\n#添加当前项目的绝对地址\nsys.path.append(os.path.dirname(os.path.abspath(__file__)))\n#执行 scrapy 内置的函数方法execute，  使用 crawl 爬取并调试，最后一个参数news 是我的爬虫文件名\nexecute(['scrapy', 'crawl', 'news'])\n```\n\n### 最终结果\n![预览](https://s2.loli.net/2022/01/29/c2eTmrxBCO3KYqV.png)","tags":["scrapy","爬虫","网易新闻"],"categories":["学习"]},{"title":"scrapy框架学习笔记","url":"/2022/01/29/scrapy框架学习笔记/","content":"\n## scrapy框架\n- 什么是框架\n    集成了很多功能，并且具有很强的通用性的项目模板\n- 如何学习框架\n- 什么是scrapy\n    - 爬虫中封装好的“明星”框架，封装程度高，使用频率高\n    - 功能：\n        - 高性能持久化存储\n        - 异步数据下载\n        - 高性能数据解析\n        - 分布式\n    - 基本使用\n        - 环境安装\n            - mac、Linux: `pip install scrapy`\n            - windows:\n                - `pip install wheel`\n                - 下载安装twisted\n                - `pip install pywin32`\n                - `pip install scrapy`\n        - 创建工程：`scrapy startproject xxxPro`\n        - 执行工程：`scrapy crawl sipderName`\n- 数据解析\n    - `response.xpath()`\n    - `extract()`\n    - `extract_first()`\n- 持久化存储\n    - 基于终端指令：\n        - 要求：只可以将parse()方法的返回值存储到本地的文本文件中\n        - 步骤：将parse中需要存储的数据包装起来并作为返回值进入return\n        - 注意：持久化对应的文本文件类型只能是：json、csv、jl、jsonlines、marshal、pickle等\n        - 好处：简洁、高效、便捷\n        - 缺点：局限性强，数据只能存储为指定后缀的文本文件，且只能存储parse封装好的指定数据\n    - 基于管道：\n        - 编码流程：\n            - 数据解析\n            - 将解析的数据封装存储到item类型的对象\n- 手动发送请求\n    - `yield scrapy.Request(url, callback)`\n\n- 五大核心组件\n    - 引擎（接收数据流&触发事务）\n        - 引擎将请求对象发送给调度器的过滤器\n        - 从调度器的队列中获取请求对象并发送给下载器\n        - 将Response发送给Spider的parse\n        - 接受parse解析好的数据并发送给管道\n    - 爬虫类（Spider）\n        - 产生url，封装为请求对象发送给 引擎 ，并进行请求发送\n        - 调用parse进行数据解析并发送给引擎\n    - 管道\n        - 接收引擎发送的解析好的数据进行持久化存储\n    - 下载器\n        - 进行数据下载获取Response\n        - 提交Response至引擎\n    - 调度器\n        - 过滤器\n            对重复的请求对象进行去重，将去重后的请求对象发送到队列\n        - 队列\n    问题：引擎是如何触发事务的？\n        - 引擎通过接收到的不同数据流类型判断事务类型\n- 请求传参\n    - 使用场景：爬取解析的数据不在同一张页面中。（深度爬取）\n    - 需求：爬取Boss直聘岗位名称与岗位描述\n    \n- 图片数据爬取之ImagesPipeline\n    - 基于字符串和基于图片的区别\n        - 字符串： 只需要基于xpath进行解析且提交管道并进行持久化\n        - 图片： xpath解析出图片src的属性值，单独对图片地址发起请求获取图片二进制类型的数据\n    - ImagesPipeline:\n        - 只需要将img的src的属性值进行解析，提交到管道，管道就会对图片的src进行请求发送获取图片的二进制数据，且还会帮我们进行持久化存储\n        - 需求：爬取站长素材的高清图片\n        - 使用流程：\n            - 解析图片地址（懒加载）\n            - 将存储图片地址的item提交到指定的管道类\n            - 在管道文件中定制一个基于ImagesPipeline的管道类\n                - `get_media_request()`\n                - `file_path()`\n                - `item_completed()`\n            - 在配置文件中：\n                - 指定文件存储目录: `IMAGES_STORE = '[path]'`\n                - 指定开启的管道： 自定制的管道类\n        - 遇到的问题：\n            - item提交给管道后，管道不接收图片，死活没有反应: `INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)`\n            - LOG_LEVEL = 'DEBUG'后看到一条警告: \n    `WARNING: Disabled ImgsPipeline: ImagesPipeline requires installing Pillow 4.0.0 or later`于是就赶紧安装了Pillow, 问题得以解决\n              \n- 中间件\n    - 爬虫中间件\n    - 下载中间件\n        - 位置：引擎和下载器之间\n        - 功能：批量拦截整个工程中所有的请求和响应\n        - 拦截请求：\n            - 进行UA伪装（可以对指定的请求进行专门的UA伪装）\n            - 代理IP的设定\n        - 拦截响应：\n            - 篡改响应数据、对象\n            - 需求：爬取网易新闻数据（标题+内容）\n                1. 通过首页解析出五大板块对应详情页的URL（直接爬取）\n                2. 板块对应的新闻标题列表（动态加载）\n                3. 通过解析每一条新闻详情页URL，获取详情页源码解析出新闻内容（直接爬取）","tags":["scrapy","爬虫","python","框架"],"categories":["学习"]},{"title":"selenium模拟12306登录","url":"/2022/01/28/selenium模拟12306登录/","content":"\n```python \nimport time\n\nfrom selenium import webdriver\nfrom lxml import etree\nfrom selenium.webdriver import ActionChains, ChromeOptions as Options\nfrom selenium.webdriver.common.by import By\njs = 'return window.navigator.webdriver'\n'''\n    实现无可视化界面\n'''\noptions = Options()\n# options.add_argument('--headless')\n# options.add_argument('--disable-gpu')\n'''\n    实现规避检测\n'''\noption_avoid = Options()\noption_avoid.add_experimental_option('excludeSwitches', ['enable-automation'])\noptions.add_experimental_option('useAutomationExtension', False)\nbro = webdriver.Chrome(chrome_options=options, options=option_avoid)\n# 12306会通过获取window.navigator.webdriver属性判断是否为模拟浏览器\n# 在加载阶段调用cdp(Chrome Devtool Protocol)抹掉该属性\nbro.execute_cdp_cmd(\"Page.addScriptToEvaluateOnNewDocument\", {\n  \"source\": \"\"\"\n    Object.defineProperty(navigator, 'webdriver', {\n      get: () => undefined\n    })\n  \"\"\"\n})\nbro.get('https://kyfw.12306.cn/otn/resources/login.html')\nusername_input = bro.find_element(By.ID, 'J-userName')\npassword_input = bro.find_element(By.ID, 'J-password')\nusername_input.send_keys('用户名xxxxx')\npassword_input.send_keys('密码xxxxx')\nlogin_btn = bro.find_element(By.ID, 'J-login')\nlogin_btn.click()\nslide_modal = bro.find_element(By.ID, 'modal')\nbro.execute_script('document.title =\"测试\"')\nbro.execute_script('document.body.appendChild(document.createElement(\\'div\\'))')\ntime.sleep(2)\nprint(bro.execute_script(js))\n\nwith open('./login.html', 'w', encoding='utf-8') as fp:\n    fp.write(bro.page_source)\nwhile True:\n    try:\n        action = webdriver.ActionChains(bro)  # 利用行为链，持续按住并拖拽\n        span = bro.find_element(By.ID, 'nc_1_n1z')  # 获取滑块\n        action.drag_and_drop_by_offset(span, 330, 0).perform()  # 按住并拖动 >300px即可，选用330绰绰有余\n        # action.click_and_hold(span).perform()\n        # action.move_by_offset(xoffset=300,yoffset=0).perform() 另一张拖动\n        action.release()  # 释放\n        print(bro.execute_script(js))\n        time.sleep(2)\n        a = bro.find_element(By.ID, 'nc_1_refresh1')  # 查找刷新按钮，如果没有说明登录成功，执行except跳出循环\n        a.click()  # 如果刚刚滑动失败，则点击刷新，重新滑动\n        time.sleep(4)\n    except Exception as e:\n        print(e)\n        break\n\n```","tags":["python","selenium"]},{"title":"临江仙·夜饮东坡醒复醉 苏轼","url":"/2022/01/26/临江仙·夜饮东坡醒复醉/","content":"\n夜饮东坡醒复醉，归来仿佛三更。家童鼻息已雷鸣。敲门都不应，倚杖听江声。\n\n长恨此身非我有，何时忘却营营。夜阑风静縠纹平。小舟从此逝，江海寄余生。","tags":["诗词"]},{"title":"洗牌算法","url":"/2021/12/29/洗牌算法/","content":"## 基本原理\n>   洗牌算法是一种将一组数据随机排列的算法，保证每一个元素重新被分配到任何一个位置上的几率都是均等的，是保证随机程度的关键。\t\n\n每次随机选取一个数，然后将该数与数组中最后(或最前)的元素相交换(如果随机选中的是最后/最前的元素，则相当于没有发生交换)；然后缩小选取数组的范围，去掉最后的元素,即之前随机抽取出的数。重复上面的过程，直到剩余数组的大小为1，即只有一个元素时结束。\n## 完整代码\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>洗牌算法</title>\n</head>\n\n<body>\n    <script>\n        let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n        document.writeln(arr)\n        document.writeln(\"<p>洗牌算法=></p>\")\n\n        function pockerAlgorithm(arr) {\n            let len = arr.length\n            arr.forEach((item, index) => {\n                let max = len - index - 1 // cal max position\n                let pos = Math.floor(Math.random() * (max + 1))\n                console.log(max + \"     \" + pos)\n\n                let temp = arr[pos]\n                arr[pos] = arr[max]\n                arr[max] = temp\n            })\n            return arr\n        }\n\n        document.writeln(pockerAlgorithm(arr) + \"<br>\")\n        document.writeln(pockerAlgorithm(arr) + \"<br>\")\n        document.writeln(pockerAlgorithm(arr) + \"<br>\")\n    </script>\n</body>\n\n</html>\n```","tags":["算法","洗牌算法"],"categories":["学习"]},{"title":"我喜欢过两个女孩，一个是你，另一个也是你","url":"/2020/08/05/我喜欢过两个女孩，一个是你，另一个也是你/","content":"\n<p style=\"font-size: 2rem;font-family: 楷体\">遗憾没有早早遇见，与你之间错过了许多年。</p>\n\n> <p style=\"font-family: 楷体\">小时候不懂鲁迅所说的：“我们家有两棵树，一颗是枣树，另一颗也是枣树。”直到经历了一些事情，才渐渐地明白了此中的深意。</p>\n\n<p style=\"font-family: 楷体\">煙雨行舟卻不知舟在何處</p>\n\n<p style=\"font-family: 楷体\">唱着年少有爲的人終究是負了佳人</p>\n\n<p style=\"font-family: 楷体\">“誰能憑愛意要富士山私有”</p>\n\n<p style=\"font-family: 楷体\">本就無法打動的人</p>\n\n<p style=\"font-family: 楷体\">憑你再用盡心機又如何</p>\n\n<p style=\"font-family: 楷体\">我的愛像塵埃</p>\n\n<p style=\"font-family: 楷体\">何謂小恩 何謂小惠</p>\n\n<p style=\"font-family: 楷体\">何謂大恩 何謂大德</p>\n\n<p style=\"font-family: 楷体\">再微不得到的小惠也能變成大恩</p>\n\n<p style=\"font-family: 楷体\">只是你放下了手裡的放大鏡</p>\n\n<p style=\"font-family: 楷体\">沒有誰對誰錯 只有愛與不愛</p>\n\n<p style=\"font-family: 楷体\">這世界還是一片光亮</p>\n\n<p style=\"font-family: 楷体\">我要帶你到處去飛翔</p>\n\n<p style=\"font-family: 楷体\">你不再是我的專屬</p>\n\n<p style=\"font-family: 楷体\">你的裙擺 你的衣角</p>\n\n<p style=\"font-family: 楷体\">你的薄脣 你的眉眼</p>\n\n<p style=\"font-family: 楷体\">看着都有種別樣的心酸</p>\n\n<p style=\"font-family: 楷体\">不過還好 慢慢地放下</p>\n\n<p style=\"font-family: 楷体\">舊的總要走 新的總要來</p>\n\n<p style=\"font-family: 楷体\">不過我是個深情的人</p>\n\n<p style=\"font-family: 楷体\">枯死的還能張處新芽</p>\n\n<p style=\"font-family: 楷体\">我靜靜地蹲在花盆前爲枯死的小花澆水</p>\n\n<p style=\"font-family: 楷体\">我想象着小花復甦後我欣喜若狂的樣子</p>\n\n<p style=\"font-family: 楷体\">有人勸我不如再摘一株小花</p>\n\n<p style=\"font-family: 楷体\">一樣美麗 一樣芬芳</p>\n\n<p style=\"font-family: 楷体\">但</p>\n\n\n\n<p style=\"font-family: 楷体\">總歸不是這一株小花</p>\n\n<p style=\"font-family: 楷体\">我也早已失去了種花的本事</p>\n","tags":["Heart"]},{"title":"生与死","url":"/2020/07/27/石凳/","content":"\n\n图书馆前的林荫路上有许多石凳\n\n我一个一个地坐过去\n\n每次坐下没过一会\n\n我都会忍不住看向下一个凳子\n\n总觉得下面的那一条才是我们那天坐的\n\n我大约是找到了那天的凳子\n\n也可能是弄丢了你-\n","tags":["人生","heart"]},{"title":"浮世三千","url":"/2020/07/25/浮世三千/","content":"\n**I love three things in the world**\n**The sun, The moon, and you**\n**Sun for the morning**\n**Moon for the night**\n**And you, forever**\n\n\n<p style=\"font-family: 楷体,隶书,宋体\">浮世三千 吾爱有三</p>\n<p>日， 月， 与卿</p>\n<p>日为朝</p>\n<p>月为暮</p>\n卿为朝朝暮暮\n\n","tags":["Heart","Soul"],"categories":["随笔"]},{"title":"老男孩","url":"/2020/07/25/老男孩/","content":"# 这辈子也不会这么迷茫了\n\n> “那是我日夜思念深深爱着的人呐，到底我该如何表达，她会接受我吗？”\n\n 最近尤其喜欢这首歌，大概是歌词里面凡是带“她”的我都喜欢吧。大学生涯以来最困扰我的问题竟然不是写不出好的程序，我也是奇了怪了。\n\n说再多的话也无济于事，可能这是我自己独有的属性，脑子里的想法就像波澜的海面，原本平静的海面不知何时就会泛起一阵涟漪。我的内心总是不平静的，嘴上总说着“没事没事，就是发会呆”，不过是不愿往深处想罢了，越往深处想，心里越堵得慌。曾经嘲笑别人输给了爱情，结果自己也陷了进去，无法自拔，不过是不愿往深处想罢了，越往深处想，心里越堵得慌。曾经嘲笑别人输给了爱情，结果自己也陷了进去，无法自拔。。\n","tags":["Heart","人生","Soul"]},{"title":"裤子","url":"/2020/05/27/裤子/","content":"\n<!--那条裤子\n\n当时有点确实有点窄\n\n但是现在很合身\n\n可能是因为夏天来了 穿的薄了\n\n也可能\n\n是因为你走了-->\n略\n","tags":["Soul"],"categories":["随笔"]},{"title":"博客搭建完成","url":"/2020/04/05/My-first-post/","content":"\n# 第一次博客\n\n## 纪念\n\n>  这是我的第一次博客，今天终于成功地用Hexo搭建起来一个个人博客。\n\n​\t最近在忙实验和项目， 事情还是不少的，下下来打算好好地复习一下功课，再研究点自己喜欢的小玩意。\n\n## 计划\n\n邻近五一了，5天时间，本来打算去找可爱的，但是她要和家人出去玩，所以五一假期应该会有许多的空余 时间了。这段时间也可以利用起来，完善一下最近想做的一些事情。\n\n+ **复习硬件和算法**\n+ **研究一下hexo，在github搭建一个完整的博客体系**\n+ 做点小手工 ， *这也是我一直以来非常想做的事情*\n+ 好久没有看英语了，得抓紧时间学英语\n+ 写一篇博客讲一讲自己搭建博客的经历\n+ 好好地看看数据库\n\n\n\n### 最后一条：**当然要和基友整一下大革命啦**！\n\n\n\n","tags":["日常"]}]